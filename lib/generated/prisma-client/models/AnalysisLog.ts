
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `AnalysisLog` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model AnalysisLog
 * 
 */
export type AnalysisLogModel = runtime.Types.Result.DefaultSelection<Prisma.$AnalysisLogPayload>

export type AggregateAnalysisLog = {
  _count: AnalysisLogCountAggregateOutputType | null
  _avg: AnalysisLogAvgAggregateOutputType | null
  _sum: AnalysisLogSumAggregateOutputType | null
  _min: AnalysisLogMinAggregateOutputType | null
  _max: AnalysisLogMaxAggregateOutputType | null
}

export type AnalysisLogAvgAggregateOutputType = {
  duration_ms: number | null
  probability_tuberculosis: number | null
}

export type AnalysisLogSumAggregateOutputType = {
  duration_ms: number | null
  probability_tuberculosis: number | null
}

export type AnalysisLogMinAggregateOutputType = {
  id: string | null
  created_at: Date | null
  client_ip: string | null
  error: string | null
  status: string | null
  duration_ms: number | null
  probability_tuberculosis: number | null
}

export type AnalysisLogMaxAggregateOutputType = {
  id: string | null
  created_at: Date | null
  client_ip: string | null
  error: string | null
  status: string | null
  duration_ms: number | null
  probability_tuberculosis: number | null
}

export type AnalysisLogCountAggregateOutputType = {
  id: number
  created_at: number
  client_ip: number
  error: number
  status: number
  duration_ms: number
  probability_tuberculosis: number
  _all: number
}


export type AnalysisLogAvgAggregateInputType = {
  duration_ms?: true
  probability_tuberculosis?: true
}

export type AnalysisLogSumAggregateInputType = {
  duration_ms?: true
  probability_tuberculosis?: true
}

export type AnalysisLogMinAggregateInputType = {
  id?: true
  created_at?: true
  client_ip?: true
  error?: true
  status?: true
  duration_ms?: true
  probability_tuberculosis?: true
}

export type AnalysisLogMaxAggregateInputType = {
  id?: true
  created_at?: true
  client_ip?: true
  error?: true
  status?: true
  duration_ms?: true
  probability_tuberculosis?: true
}

export type AnalysisLogCountAggregateInputType = {
  id?: true
  created_at?: true
  client_ip?: true
  error?: true
  status?: true
  duration_ms?: true
  probability_tuberculosis?: true
  _all?: true
}

export type AnalysisLogAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which AnalysisLog to aggregate.
   */
  where?: Prisma.AnalysisLogWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AnalysisLogs to fetch.
   */
  orderBy?: Prisma.AnalysisLogOrderByWithRelationInput | Prisma.AnalysisLogOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.AnalysisLogWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AnalysisLogs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AnalysisLogs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned AnalysisLogs
  **/
  _count?: true | AnalysisLogCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: AnalysisLogAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: AnalysisLogSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: AnalysisLogMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: AnalysisLogMaxAggregateInputType
}

export type GetAnalysisLogAggregateType<T extends AnalysisLogAggregateArgs> = {
      [P in keyof T & keyof AggregateAnalysisLog]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAnalysisLog[P]>
    : Prisma.GetScalarType<T[P], AggregateAnalysisLog[P]>
}




export type AnalysisLogGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AnalysisLogWhereInput
  orderBy?: Prisma.AnalysisLogOrderByWithAggregationInput | Prisma.AnalysisLogOrderByWithAggregationInput[]
  by: Prisma.AnalysisLogScalarFieldEnum[] | Prisma.AnalysisLogScalarFieldEnum
  having?: Prisma.AnalysisLogScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: AnalysisLogCountAggregateInputType | true
  _avg?: AnalysisLogAvgAggregateInputType
  _sum?: AnalysisLogSumAggregateInputType
  _min?: AnalysisLogMinAggregateInputType
  _max?: AnalysisLogMaxAggregateInputType
}

export type AnalysisLogGroupByOutputType = {
  id: string
  created_at: Date
  client_ip: string | null
  error: string | null
  status: string
  duration_ms: number | null
  probability_tuberculosis: number | null
  _count: AnalysisLogCountAggregateOutputType | null
  _avg: AnalysisLogAvgAggregateOutputType | null
  _sum: AnalysisLogSumAggregateOutputType | null
  _min: AnalysisLogMinAggregateOutputType | null
  _max: AnalysisLogMaxAggregateOutputType | null
}

type GetAnalysisLogGroupByPayload<T extends AnalysisLogGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AnalysisLogGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof AnalysisLogGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AnalysisLogGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AnalysisLogGroupByOutputType[P]>
      }
    >
  >



export type AnalysisLogWhereInput = {
  AND?: Prisma.AnalysisLogWhereInput | Prisma.AnalysisLogWhereInput[]
  OR?: Prisma.AnalysisLogWhereInput[]
  NOT?: Prisma.AnalysisLogWhereInput | Prisma.AnalysisLogWhereInput[]
  id?: Prisma.StringFilter<"AnalysisLog"> | string
  created_at?: Prisma.DateTimeFilter<"AnalysisLog"> | Date | string
  client_ip?: Prisma.StringNullableFilter<"AnalysisLog"> | string | null
  error?: Prisma.StringNullableFilter<"AnalysisLog"> | string | null
  status?: Prisma.StringFilter<"AnalysisLog"> | string
  duration_ms?: Prisma.FloatNullableFilter<"AnalysisLog"> | number | null
  probability_tuberculosis?: Prisma.FloatNullableFilter<"AnalysisLog"> | number | null
}

export type AnalysisLogOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  client_ip?: Prisma.SortOrderInput | Prisma.SortOrder
  error?: Prisma.SortOrderInput | Prisma.SortOrder
  status?: Prisma.SortOrder
  duration_ms?: Prisma.SortOrderInput | Prisma.SortOrder
  probability_tuberculosis?: Prisma.SortOrderInput | Prisma.SortOrder
}

export type AnalysisLogWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.AnalysisLogWhereInput | Prisma.AnalysisLogWhereInput[]
  OR?: Prisma.AnalysisLogWhereInput[]
  NOT?: Prisma.AnalysisLogWhereInput | Prisma.AnalysisLogWhereInput[]
  created_at?: Prisma.DateTimeFilter<"AnalysisLog"> | Date | string
  client_ip?: Prisma.StringNullableFilter<"AnalysisLog"> | string | null
  error?: Prisma.StringNullableFilter<"AnalysisLog"> | string | null
  status?: Prisma.StringFilter<"AnalysisLog"> | string
  duration_ms?: Prisma.FloatNullableFilter<"AnalysisLog"> | number | null
  probability_tuberculosis?: Prisma.FloatNullableFilter<"AnalysisLog"> | number | null
}, "id">

export type AnalysisLogOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  client_ip?: Prisma.SortOrderInput | Prisma.SortOrder
  error?: Prisma.SortOrderInput | Prisma.SortOrder
  status?: Prisma.SortOrder
  duration_ms?: Prisma.SortOrderInput | Prisma.SortOrder
  probability_tuberculosis?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.AnalysisLogCountOrderByAggregateInput
  _avg?: Prisma.AnalysisLogAvgOrderByAggregateInput
  _max?: Prisma.AnalysisLogMaxOrderByAggregateInput
  _min?: Prisma.AnalysisLogMinOrderByAggregateInput
  _sum?: Prisma.AnalysisLogSumOrderByAggregateInput
}

export type AnalysisLogScalarWhereWithAggregatesInput = {
  AND?: Prisma.AnalysisLogScalarWhereWithAggregatesInput | Prisma.AnalysisLogScalarWhereWithAggregatesInput[]
  OR?: Prisma.AnalysisLogScalarWhereWithAggregatesInput[]
  NOT?: Prisma.AnalysisLogScalarWhereWithAggregatesInput | Prisma.AnalysisLogScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"AnalysisLog"> | string
  created_at?: Prisma.DateTimeWithAggregatesFilter<"AnalysisLog"> | Date | string
  client_ip?: Prisma.StringNullableWithAggregatesFilter<"AnalysisLog"> | string | null
  error?: Prisma.StringNullableWithAggregatesFilter<"AnalysisLog"> | string | null
  status?: Prisma.StringWithAggregatesFilter<"AnalysisLog"> | string
  duration_ms?: Prisma.FloatNullableWithAggregatesFilter<"AnalysisLog"> | number | null
  probability_tuberculosis?: Prisma.FloatNullableWithAggregatesFilter<"AnalysisLog"> | number | null
}

export type AnalysisLogCreateInput = {
  id?: string
  created_at?: Date | string
  client_ip?: string | null
  error?: string | null
  status: string
  duration_ms?: number | null
  probability_tuberculosis?: number | null
}

export type AnalysisLogUncheckedCreateInput = {
  id?: string
  created_at?: Date | string
  client_ip?: string | null
  error?: string | null
  status: string
  duration_ms?: number | null
  probability_tuberculosis?: number | null
}

export type AnalysisLogUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  client_ip?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  error?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  duration_ms?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  probability_tuberculosis?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
}

export type AnalysisLogUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  client_ip?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  error?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  duration_ms?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  probability_tuberculosis?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
}

export type AnalysisLogCreateManyInput = {
  id?: string
  created_at?: Date | string
  client_ip?: string | null
  error?: string | null
  status: string
  duration_ms?: number | null
  probability_tuberculosis?: number | null
}

export type AnalysisLogUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  client_ip?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  error?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  duration_ms?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  probability_tuberculosis?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
}

export type AnalysisLogUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  client_ip?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  error?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  duration_ms?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  probability_tuberculosis?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
}

export type AnalysisLogCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  client_ip?: Prisma.SortOrder
  error?: Prisma.SortOrder
  status?: Prisma.SortOrder
  duration_ms?: Prisma.SortOrder
  probability_tuberculosis?: Prisma.SortOrder
}

export type AnalysisLogAvgOrderByAggregateInput = {
  duration_ms?: Prisma.SortOrder
  probability_tuberculosis?: Prisma.SortOrder
}

export type AnalysisLogMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  client_ip?: Prisma.SortOrder
  error?: Prisma.SortOrder
  status?: Prisma.SortOrder
  duration_ms?: Prisma.SortOrder
  probability_tuberculosis?: Prisma.SortOrder
}

export type AnalysisLogMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  client_ip?: Prisma.SortOrder
  error?: Prisma.SortOrder
  status?: Prisma.SortOrder
  duration_ms?: Prisma.SortOrder
  probability_tuberculosis?: Prisma.SortOrder
}

export type AnalysisLogSumOrderByAggregateInput = {
  duration_ms?: Prisma.SortOrder
  probability_tuberculosis?: Prisma.SortOrder
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}

export type NullableStringFieldUpdateOperationsInput = {
  set?: string | null
}

export type NullableFloatFieldUpdateOperationsInput = {
  set?: number | null
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}



export type AnalysisLogSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  created_at?: boolean
  client_ip?: boolean
  error?: boolean
  status?: boolean
  duration_ms?: boolean
  probability_tuberculosis?: boolean
}, ExtArgs["result"]["analysisLog"]>

export type AnalysisLogSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  created_at?: boolean
  client_ip?: boolean
  error?: boolean
  status?: boolean
  duration_ms?: boolean
  probability_tuberculosis?: boolean
}, ExtArgs["result"]["analysisLog"]>

export type AnalysisLogSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  created_at?: boolean
  client_ip?: boolean
  error?: boolean
  status?: boolean
  duration_ms?: boolean
  probability_tuberculosis?: boolean
}, ExtArgs["result"]["analysisLog"]>

export type AnalysisLogSelectScalar = {
  id?: boolean
  created_at?: boolean
  client_ip?: boolean
  error?: boolean
  status?: boolean
  duration_ms?: boolean
  probability_tuberculosis?: boolean
}

export type AnalysisLogOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "created_at" | "client_ip" | "error" | "status" | "duration_ms" | "probability_tuberculosis", ExtArgs["result"]["analysisLog"]>

export type $AnalysisLogPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "AnalysisLog"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    created_at: Date
    client_ip: string | null
    error: string | null
    status: string
    duration_ms: number | null
    probability_tuberculosis: number | null
  }, ExtArgs["result"]["analysisLog"]>
  composites: {}
}

export type AnalysisLogGetPayload<S extends boolean | null | undefined | AnalysisLogDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$AnalysisLogPayload, S>

export type AnalysisLogCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<AnalysisLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: AnalysisLogCountAggregateInputType | true
  }

export interface AnalysisLogDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AnalysisLog'], meta: { name: 'AnalysisLog' } }
  /**
   * Find zero or one AnalysisLog that matches the filter.
   * @param {AnalysisLogFindUniqueArgs} args - Arguments to find a AnalysisLog
   * @example
   * // Get one AnalysisLog
   * const analysisLog = await prisma.analysisLog.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AnalysisLogFindUniqueArgs>(args: Prisma.SelectSubset<T, AnalysisLogFindUniqueArgs<ExtArgs>>): Prisma.Prisma__AnalysisLogClient<runtime.Types.Result.GetResult<Prisma.$AnalysisLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one AnalysisLog that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AnalysisLogFindUniqueOrThrowArgs} args - Arguments to find a AnalysisLog
   * @example
   * // Get one AnalysisLog
   * const analysisLog = await prisma.analysisLog.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AnalysisLogFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, AnalysisLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__AnalysisLogClient<runtime.Types.Result.GetResult<Prisma.$AnalysisLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first AnalysisLog that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AnalysisLogFindFirstArgs} args - Arguments to find a AnalysisLog
   * @example
   * // Get one AnalysisLog
   * const analysisLog = await prisma.analysisLog.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AnalysisLogFindFirstArgs>(args?: Prisma.SelectSubset<T, AnalysisLogFindFirstArgs<ExtArgs>>): Prisma.Prisma__AnalysisLogClient<runtime.Types.Result.GetResult<Prisma.$AnalysisLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first AnalysisLog that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AnalysisLogFindFirstOrThrowArgs} args - Arguments to find a AnalysisLog
   * @example
   * // Get one AnalysisLog
   * const analysisLog = await prisma.analysisLog.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AnalysisLogFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, AnalysisLogFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__AnalysisLogClient<runtime.Types.Result.GetResult<Prisma.$AnalysisLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more AnalysisLogs that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AnalysisLogFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all AnalysisLogs
   * const analysisLogs = await prisma.analysisLog.findMany()
   * 
   * // Get first 10 AnalysisLogs
   * const analysisLogs = await prisma.analysisLog.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const analysisLogWithIdOnly = await prisma.analysisLog.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends AnalysisLogFindManyArgs>(args?: Prisma.SelectSubset<T, AnalysisLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AnalysisLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a AnalysisLog.
   * @param {AnalysisLogCreateArgs} args - Arguments to create a AnalysisLog.
   * @example
   * // Create one AnalysisLog
   * const AnalysisLog = await prisma.analysisLog.create({
   *   data: {
   *     // ... data to create a AnalysisLog
   *   }
   * })
   * 
   */
  create<T extends AnalysisLogCreateArgs>(args: Prisma.SelectSubset<T, AnalysisLogCreateArgs<ExtArgs>>): Prisma.Prisma__AnalysisLogClient<runtime.Types.Result.GetResult<Prisma.$AnalysisLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many AnalysisLogs.
   * @param {AnalysisLogCreateManyArgs} args - Arguments to create many AnalysisLogs.
   * @example
   * // Create many AnalysisLogs
   * const analysisLog = await prisma.analysisLog.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends AnalysisLogCreateManyArgs>(args?: Prisma.SelectSubset<T, AnalysisLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many AnalysisLogs and returns the data saved in the database.
   * @param {AnalysisLogCreateManyAndReturnArgs} args - Arguments to create many AnalysisLogs.
   * @example
   * // Create many AnalysisLogs
   * const analysisLog = await prisma.analysisLog.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many AnalysisLogs and only return the `id`
   * const analysisLogWithIdOnly = await prisma.analysisLog.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends AnalysisLogCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, AnalysisLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AnalysisLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a AnalysisLog.
   * @param {AnalysisLogDeleteArgs} args - Arguments to delete one AnalysisLog.
   * @example
   * // Delete one AnalysisLog
   * const AnalysisLog = await prisma.analysisLog.delete({
   *   where: {
   *     // ... filter to delete one AnalysisLog
   *   }
   * })
   * 
   */
  delete<T extends AnalysisLogDeleteArgs>(args: Prisma.SelectSubset<T, AnalysisLogDeleteArgs<ExtArgs>>): Prisma.Prisma__AnalysisLogClient<runtime.Types.Result.GetResult<Prisma.$AnalysisLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one AnalysisLog.
   * @param {AnalysisLogUpdateArgs} args - Arguments to update one AnalysisLog.
   * @example
   * // Update one AnalysisLog
   * const analysisLog = await prisma.analysisLog.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends AnalysisLogUpdateArgs>(args: Prisma.SelectSubset<T, AnalysisLogUpdateArgs<ExtArgs>>): Prisma.Prisma__AnalysisLogClient<runtime.Types.Result.GetResult<Prisma.$AnalysisLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more AnalysisLogs.
   * @param {AnalysisLogDeleteManyArgs} args - Arguments to filter AnalysisLogs to delete.
   * @example
   * // Delete a few AnalysisLogs
   * const { count } = await prisma.analysisLog.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends AnalysisLogDeleteManyArgs>(args?: Prisma.SelectSubset<T, AnalysisLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more AnalysisLogs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AnalysisLogUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many AnalysisLogs
   * const analysisLog = await prisma.analysisLog.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends AnalysisLogUpdateManyArgs>(args: Prisma.SelectSubset<T, AnalysisLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more AnalysisLogs and returns the data updated in the database.
   * @param {AnalysisLogUpdateManyAndReturnArgs} args - Arguments to update many AnalysisLogs.
   * @example
   * // Update many AnalysisLogs
   * const analysisLog = await prisma.analysisLog.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more AnalysisLogs and only return the `id`
   * const analysisLogWithIdOnly = await prisma.analysisLog.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends AnalysisLogUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, AnalysisLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AnalysisLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one AnalysisLog.
   * @param {AnalysisLogUpsertArgs} args - Arguments to update or create a AnalysisLog.
   * @example
   * // Update or create a AnalysisLog
   * const analysisLog = await prisma.analysisLog.upsert({
   *   create: {
   *     // ... data to create a AnalysisLog
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the AnalysisLog we want to update
   *   }
   * })
   */
  upsert<T extends AnalysisLogUpsertArgs>(args: Prisma.SelectSubset<T, AnalysisLogUpsertArgs<ExtArgs>>): Prisma.Prisma__AnalysisLogClient<runtime.Types.Result.GetResult<Prisma.$AnalysisLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of AnalysisLogs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AnalysisLogCountArgs} args - Arguments to filter AnalysisLogs to count.
   * @example
   * // Count the number of AnalysisLogs
   * const count = await prisma.analysisLog.count({
   *   where: {
   *     // ... the filter for the AnalysisLogs we want to count
   *   }
   * })
  **/
  count<T extends AnalysisLogCountArgs>(
    args?: Prisma.Subset<T, AnalysisLogCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], AnalysisLogCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a AnalysisLog.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AnalysisLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends AnalysisLogAggregateArgs>(args: Prisma.Subset<T, AnalysisLogAggregateArgs>): Prisma.PrismaPromise<GetAnalysisLogAggregateType<T>>

  /**
   * Group by AnalysisLog.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AnalysisLogGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends AnalysisLogGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AnalysisLogGroupByArgs['orderBy'] }
      : { orderBy?: AnalysisLogGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, AnalysisLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAnalysisLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the AnalysisLog model
 */
readonly fields: AnalysisLogFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for AnalysisLog.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AnalysisLogClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the AnalysisLog model
 */
export interface AnalysisLogFieldRefs {
  readonly id: Prisma.FieldRef<"AnalysisLog", 'String'>
  readonly created_at: Prisma.FieldRef<"AnalysisLog", 'DateTime'>
  readonly client_ip: Prisma.FieldRef<"AnalysisLog", 'String'>
  readonly error: Prisma.FieldRef<"AnalysisLog", 'String'>
  readonly status: Prisma.FieldRef<"AnalysisLog", 'String'>
  readonly duration_ms: Prisma.FieldRef<"AnalysisLog", 'Float'>
  readonly probability_tuberculosis: Prisma.FieldRef<"AnalysisLog", 'Float'>
}
    

// Custom InputTypes
/**
 * AnalysisLog findUnique
 */
export type AnalysisLogFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AnalysisLog
   */
  select?: Prisma.AnalysisLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AnalysisLog
   */
  omit?: Prisma.AnalysisLogOmit<ExtArgs> | null
  /**
   * Filter, which AnalysisLog to fetch.
   */
  where: Prisma.AnalysisLogWhereUniqueInput
}

/**
 * AnalysisLog findUniqueOrThrow
 */
export type AnalysisLogFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AnalysisLog
   */
  select?: Prisma.AnalysisLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AnalysisLog
   */
  omit?: Prisma.AnalysisLogOmit<ExtArgs> | null
  /**
   * Filter, which AnalysisLog to fetch.
   */
  where: Prisma.AnalysisLogWhereUniqueInput
}

/**
 * AnalysisLog findFirst
 */
export type AnalysisLogFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AnalysisLog
   */
  select?: Prisma.AnalysisLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AnalysisLog
   */
  omit?: Prisma.AnalysisLogOmit<ExtArgs> | null
  /**
   * Filter, which AnalysisLog to fetch.
   */
  where?: Prisma.AnalysisLogWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AnalysisLogs to fetch.
   */
  orderBy?: Prisma.AnalysisLogOrderByWithRelationInput | Prisma.AnalysisLogOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for AnalysisLogs.
   */
  cursor?: Prisma.AnalysisLogWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AnalysisLogs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AnalysisLogs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of AnalysisLogs.
   */
  distinct?: Prisma.AnalysisLogScalarFieldEnum | Prisma.AnalysisLogScalarFieldEnum[]
}

/**
 * AnalysisLog findFirstOrThrow
 */
export type AnalysisLogFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AnalysisLog
   */
  select?: Prisma.AnalysisLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AnalysisLog
   */
  omit?: Prisma.AnalysisLogOmit<ExtArgs> | null
  /**
   * Filter, which AnalysisLog to fetch.
   */
  where?: Prisma.AnalysisLogWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AnalysisLogs to fetch.
   */
  orderBy?: Prisma.AnalysisLogOrderByWithRelationInput | Prisma.AnalysisLogOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for AnalysisLogs.
   */
  cursor?: Prisma.AnalysisLogWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AnalysisLogs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AnalysisLogs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of AnalysisLogs.
   */
  distinct?: Prisma.AnalysisLogScalarFieldEnum | Prisma.AnalysisLogScalarFieldEnum[]
}

/**
 * AnalysisLog findMany
 */
export type AnalysisLogFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AnalysisLog
   */
  select?: Prisma.AnalysisLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AnalysisLog
   */
  omit?: Prisma.AnalysisLogOmit<ExtArgs> | null
  /**
   * Filter, which AnalysisLogs to fetch.
   */
  where?: Prisma.AnalysisLogWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AnalysisLogs to fetch.
   */
  orderBy?: Prisma.AnalysisLogOrderByWithRelationInput | Prisma.AnalysisLogOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing AnalysisLogs.
   */
  cursor?: Prisma.AnalysisLogWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AnalysisLogs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AnalysisLogs.
   */
  skip?: number
  distinct?: Prisma.AnalysisLogScalarFieldEnum | Prisma.AnalysisLogScalarFieldEnum[]
}

/**
 * AnalysisLog create
 */
export type AnalysisLogCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AnalysisLog
   */
  select?: Prisma.AnalysisLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AnalysisLog
   */
  omit?: Prisma.AnalysisLogOmit<ExtArgs> | null
  /**
   * The data needed to create a AnalysisLog.
   */
  data: Prisma.XOR<Prisma.AnalysisLogCreateInput, Prisma.AnalysisLogUncheckedCreateInput>
}

/**
 * AnalysisLog createMany
 */
export type AnalysisLogCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many AnalysisLogs.
   */
  data: Prisma.AnalysisLogCreateManyInput | Prisma.AnalysisLogCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * AnalysisLog createManyAndReturn
 */
export type AnalysisLogCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AnalysisLog
   */
  select?: Prisma.AnalysisLogSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the AnalysisLog
   */
  omit?: Prisma.AnalysisLogOmit<ExtArgs> | null
  /**
   * The data used to create many AnalysisLogs.
   */
  data: Prisma.AnalysisLogCreateManyInput | Prisma.AnalysisLogCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * AnalysisLog update
 */
export type AnalysisLogUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AnalysisLog
   */
  select?: Prisma.AnalysisLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AnalysisLog
   */
  omit?: Prisma.AnalysisLogOmit<ExtArgs> | null
  /**
   * The data needed to update a AnalysisLog.
   */
  data: Prisma.XOR<Prisma.AnalysisLogUpdateInput, Prisma.AnalysisLogUncheckedUpdateInput>
  /**
   * Choose, which AnalysisLog to update.
   */
  where: Prisma.AnalysisLogWhereUniqueInput
}

/**
 * AnalysisLog updateMany
 */
export type AnalysisLogUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update AnalysisLogs.
   */
  data: Prisma.XOR<Prisma.AnalysisLogUpdateManyMutationInput, Prisma.AnalysisLogUncheckedUpdateManyInput>
  /**
   * Filter which AnalysisLogs to update
   */
  where?: Prisma.AnalysisLogWhereInput
  /**
   * Limit how many AnalysisLogs to update.
   */
  limit?: number
}

/**
 * AnalysisLog updateManyAndReturn
 */
export type AnalysisLogUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AnalysisLog
   */
  select?: Prisma.AnalysisLogSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the AnalysisLog
   */
  omit?: Prisma.AnalysisLogOmit<ExtArgs> | null
  /**
   * The data used to update AnalysisLogs.
   */
  data: Prisma.XOR<Prisma.AnalysisLogUpdateManyMutationInput, Prisma.AnalysisLogUncheckedUpdateManyInput>
  /**
   * Filter which AnalysisLogs to update
   */
  where?: Prisma.AnalysisLogWhereInput
  /**
   * Limit how many AnalysisLogs to update.
   */
  limit?: number
}

/**
 * AnalysisLog upsert
 */
export type AnalysisLogUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AnalysisLog
   */
  select?: Prisma.AnalysisLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AnalysisLog
   */
  omit?: Prisma.AnalysisLogOmit<ExtArgs> | null
  /**
   * The filter to search for the AnalysisLog to update in case it exists.
   */
  where: Prisma.AnalysisLogWhereUniqueInput
  /**
   * In case the AnalysisLog found by the `where` argument doesn't exist, create a new AnalysisLog with this data.
   */
  create: Prisma.XOR<Prisma.AnalysisLogCreateInput, Prisma.AnalysisLogUncheckedCreateInput>
  /**
   * In case the AnalysisLog was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.AnalysisLogUpdateInput, Prisma.AnalysisLogUncheckedUpdateInput>
}

/**
 * AnalysisLog delete
 */
export type AnalysisLogDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AnalysisLog
   */
  select?: Prisma.AnalysisLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AnalysisLog
   */
  omit?: Prisma.AnalysisLogOmit<ExtArgs> | null
  /**
   * Filter which AnalysisLog to delete.
   */
  where: Prisma.AnalysisLogWhereUniqueInput
}

/**
 * AnalysisLog deleteMany
 */
export type AnalysisLogDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which AnalysisLogs to delete
   */
  where?: Prisma.AnalysisLogWhereInput
  /**
   * Limit how many AnalysisLogs to delete.
   */
  limit?: number
}

/**
 * AnalysisLog without action
 */
export type AnalysisLogDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AnalysisLog
   */
  select?: Prisma.AnalysisLogSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AnalysisLog
   */
  omit?: Prisma.AnalysisLogOmit<ExtArgs> | null
}
